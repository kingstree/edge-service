name: Commit Stage
on: push

env:
  REGISTRY: ghcr.io #깃허브 컨테이너 저장소를 사용한다
  IMAGE_NAME: kingstree/edge-service #이미지의 이름 자신의 깃 허므 유저명을 소문자로 추가
  VERSION: latest #새 이미지를 latet로 태깅

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build, unit tests and integration tests
        run: |
          chmod +x gradlew
          ./gradlew build
      - name: Code vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          path: "${{ github.workspace }}"
          fail-build: false
          severity-cutoff: high
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Validate Kubernetes manifests
        uses: stefanprodan/kube-tools@v1
        with:
          kubectl: 1.28.3
          kubeval: 0.16.1
          # Different schema required because of https://github.com/instrumenta/kubeval/issues/301
          command: |
            kubeval --strict --schema-location https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master -d k8s
  package: #잡의 고유 식별자
    name: Package and Publish
    if: ${{ github.ref == 'refs/heads/main' }} #잡을 main 브랜치에 대해서만 실행한다.
    needs: [ build ] # 빌드 잡이 성공젓으로 수행된 경우에 잡을 실행
    runs-on: ubuntu-22.04 # 해당 버전에서 잡실행
    permissions:
      contents: read # 현재 깃 저장소를 체크아웃하기 위한 권한
      packages: write # 깃 허브 컨테이너 저장소로 이미지를 업로드하기 위한 권한
      security-events: write # 깃허브로 보안 이벤트를 제출하기 위한 권한
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4 #현제 깃 저장소를 체크아웃 한다.
      - name: Set up JDK
        uses: actions/setup-java@v4 #자바 런타임을 설치하고 설정한다.
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build container image
        run: |
          chmod +x gradlew
          ./gradlew bootBuildImage \
            --imageName ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      - name: OCI image vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          fail-build: false #이미지에서 취약점이 발견되더라도 빌드를 실패로 만들지 않는다.
          severity-cutoff: high
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3 #깃허브로 보안 취약성 리포트를 업로드한다.
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Log into container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }} #저장소 정보는 환경변수로 정의된다.
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish container image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
